
/***************************************************************************
*                                                                          *
*  Copyright (c) Raphaël Ernaelsten (@RaphErnaelsten)                      *
*  All Rights Reserved.                                                    *
*                                                                          *
*  NOTICE: Aura 2 is a commercial project.                                 * 
*  All information contained herein is, and remains the property of        *
*  Raphaël Ernaelsten.                                                     *
*  The intellectual and technical concepts contained herein are            *
*  proprietary to Raphaël Ernaelsten and are protected by copyright laws.  *
*  Dissemination of this information or reproduction of this material      *
*  is strictly forbidden.                                                  *
*                                                                          *
***************************************************************************/

#pragma warning( disable : 4714 3571 ) 

#include "../Includes/Common.cginc"

uniform RWTexture3D<FP4> lightProbesCoefficientsTexture;
uniform StructuredBuffer<SphericalHarmonicsFirstBandCoefficients> lightProbesCoefficientsBuffer;
uniform FP4 lightProbesCoefficientsTextureSize;

#pragma kernel RenderlightProbesCoefficientsTexture

[numthreads(1,1,1)]
void RenderlightProbesCoefficientsTexture(uint3 id : SV_DispatchThreadID)
{
    uint3 threadId = id;
    lightProbesCoefficientsTexture[threadId] = lightProbesCoefficientsBuffer[id.z * lightProbesCoefficientsTextureSize.x * lightProbesCoefficientsTextureSize.y + id.y * lightProbesCoefficientsTextureSize.x + id.x].redColorCoefficients;
    threadId.x += lightProbesCoefficientsTextureSize.x;
    lightProbesCoefficientsTexture[threadId] = lightProbesCoefficientsBuffer[id.z * lightProbesCoefficientsTextureSize.x * lightProbesCoefficientsTextureSize.y + id.y * lightProbesCoefficientsTextureSize.x + id.x].greenColorCoefficients;
    threadId.x += lightProbesCoefficientsTextureSize.x;
    lightProbesCoefficientsTexture[threadId] = lightProbesCoefficientsBuffer[id.z * lightProbesCoefficientsTextureSize.x * lightProbesCoefficientsTextureSize.y + id.y * lightProbesCoefficientsTextureSize.x + id.x].blueColorCoefficients;
}