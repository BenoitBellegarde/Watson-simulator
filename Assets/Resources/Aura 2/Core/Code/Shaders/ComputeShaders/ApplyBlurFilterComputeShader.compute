
/***************************************************************************
*                                                                          *
*  Copyright (c) Raphaël Ernaelsten (@RaphErnaelsten)                      *
*  All Rights Reserved.                                                    *
*                                                                          *
*  NOTICE: Aura 2 is a commercial project.                                 * 
*  All information contained herein is, and remains the property of        *
*  Raphaël Ernaelsten.                                                     *
*  The intellectual and technical concepts contained herein are            *
*  proprietary to Raphaël Ernaelsten and are protected by copyright laws.  *
*  Dissemination of this information or reproduction of this material      *
*  is strictly forbidden.                                                  *
*                                                                          *
***************************************************************************/

// Disables warnings
#pragma warning( disable : 4714 3571 3078 ) 

// TODO : Naive approach, investigate separated blur and precomputed kernel
#pragma kernel ApplyBlur	RADIUS=1
#pragma kernel ApplyBlur	RADIUS=3
#pragma kernel ApplyBlur	RADIUS=5
#pragma kernel ApplyBlur	RADIUS=1	GAUSSIAN
#pragma kernel ApplyBlur	RADIUS=3	GAUSSIAN
#pragma kernel ApplyBlur	RADIUS=5	GAUSSIAN

#define UNROLLING(x)
//#define UNROLLING(x) [unroll]
//#define UNROLLING(x) [unroll(x)]
//#define UNROLLING(x) [loop]

#define SIZE_1D (RADIUS + 1 + RADIUS)

#include "../Includes/Common.cginc"

uniform StructuredBuffer<uint> dispatchSizeBuffer;			// size = 3 -> x, y, z
uniform StructuredBuffer<uint> visibleCellsAmountBuffer;	// size = 1
uniform StructuredBuffer<CellData> visibleCellsBuffer;		// size = visibleCellsAmountBuffer[0]
uniform Texture3D<FP4> sourceTexture;
uniform RWTexture3D<FP4> destinationTexture;
uniform FP gaussianDeviation;

[numthreads(VISIBILITY_GROUPS_SIZE_X, VISIBILITY_GROUPS_SIZE_Y, VISIBILITY_GROUPS_SIZE_Z)]
void ApplyBlur(uint3 dispatchThreadID : SV_DispatchThreadID, uint3 groupID : SV_GroupID, uint3 groupThreadID : SV_GroupThreadID)
{
	uint visibleCellsAmount = visibleCellsAmountBuffer[0];
	uint3 totalDispatchsize = uint3(dispatchSizeBuffer[0], dispatchSizeBuffer[1], dispatchSizeBuffer[2]) * VISIBILITY_GROUPS_SIZE;
	uint currentThreadIndex = GetFlattenedIndex(dispatchThreadID, totalDispatchsize);

	if (currentThreadIndex >= visibleCellsAmount)
	{
		return;
	}

	CellData currentCell = visibleCellsBuffer[currentThreadIndex];

	uint3 id = currentCell.id;

#if defined(GAUSSIAN)
	FP samplesAmount = 0.0f;
	if (gaussianDeviation == 0.0f)
	{
		destinationTexture[id] = sourceTexture[id];
		return;
	}
	FP squaredGaussianDeviation = gaussianDeviation * gaussianDeviation;
#else
	const uint samplesAmount = SIZE_1D * SIZE_1D * SIZE_1D;
#endif

	FP4 color = FP4(0.0f, 0.0f, 0.0f, 0.0f);
	
	UNROLLING(SIZE_1D)
	for (int i = 0; i < SIZE_1D; ++i)
	{
		int offsetI = i - RADIUS;
		UNROLLING(SIZE_1D)
		for (int j = 0; j < SIZE_1D; ++j)
		{
			int offsetJ = j - RADIUS;
			UNROLLING(SIZE_1D)
			for (int k = 0; k < SIZE_1D; ++k)
			{
				int offsetK = k - RADIUS;
				int3 offset = int3(offsetI, offsetJ, offsetK);
				int3 sampleCoordinate = clamp(int3(id) + offset, int3(0, 0, 0), int3(Aura_BufferResolution.xyz)); // Could have excluded out-of-bounds texels but it would have resulted in a less blurry result on the borders

				FP4 sampledColor = sourceTexture[sampleCoordinate];
#if defined(GAUSSIAN)
				FP normalizedOffsetLength = length(FP3(offset) * rcp(RADIUS) * Aura_BufferTexelSize.xyz);
				normalizedOffsetLength *= normalizedOffsetLength;
				FP gaussianFactor = (1.0f / sqrt(2.0f * pi * squaredGaussianDeviation))* pow(e, -(normalizedOffsetLength / (2.0f * squaredGaussianDeviation)));
				sampledColor *= gaussianFactor;
				samplesAmount += gaussianFactor;
#endif

				color += sampledColor;
			}
		}
	}

	color *= rcp(samplesAmount);

	destinationTexture[id] = color; /////////////////////////////////// TODO : handle occluded cells
}