
/***************************************************************************
*                                                                          *
*  Copyright (c) Raphaël Ernaelsten (@RaphErnaelsten)                      *
*  All Rights Reserved.                                                    *
*                                                                          *
*  NOTICE: Aura 2 is a commercial project.                                 * 
*  All information contained herein is, and remains the property of        *
*  Raphaël Ernaelsten.                                                     *
*  The intellectual and technical concepts contained herein are            *
*  proprietary to Raphaël Ernaelsten and are protected by copyright laws.  *
*  Dissemination of this information or reproduction of this material      *
*  is strictly forbidden.                                                  *
*                                                                          *
***************************************************************************/

// Disables warnings
#pragma warning( disable : 4714 3571 ) 

#include "../Includes/Common.cginc"
#include "Includes/TemporalReprojection.cginc"

uniform Texture2D<FP> occlusionTexture;
uniform AppendStructuredBuffer<CellData> appendedCellsBuffer;
uniform RWTexture2D<int> maximumSliceAmountTexture;
uniform RWStructuredBuffer<uint3> sizeBuffer;
uniform StructuredBuffer<uint> visibleCellsAmountBuffer;
uniform bool useReprojection;

#pragma kernel ComputeVisibleCells
#pragma kernel ComputeVisibleCells OCCLUSION

[numthreads(NUM_THREAD_X, NUM_THREAD_Y, 1)]
void ComputeVisibleCells(uint3 dispatchThreadID : SV_DispatchThreadID, uint3 groupID : SV_GroupID, uint3 groupThreadID : SV_GroupThreadID)
{
	uint3 id;
	id.xy = dispatchThreadID.xy;
#if defined(OCCLUSION)
	FP occlusionNormalizedDepth = occlusionTexture[id.xy].x;
#endif
	FP4 normalizedLocalPos;
	normalizedLocalPos.xy = GetNormalizedLocalLayerPosition(id.xy);
	CellData cell;
	
	uint layerCount = (uint)Aura_BufferResolution.z;
	[loop]
	for (uint z = 0; z < layerCount; ++z)
	{
		// id
		id.z = z;
		cell.id = id;

		//jittered local pos
		normalizedLocalPos.w = GetNormalizedLocalDepth(z);
		if (useReprojection)
		{
			cell.jitteredLocalPosition = normalizedLocalPos.xyw;
			JitterPosition(cell.jitteredLocalPosition, id);
			cell.jitteredLocalPosition.z = BiasNormalizedDepth(cell.jitteredLocalPosition.z);
		}

		// local pos
		normalizedLocalPos.z = BiasNormalizedDepth(normalizedLocalPos.w);
		cell.localPosition = normalizedLocalPos;

		appendedCellsBuffer.Append(cell); // Make sure it's appended once again after cell is deeper ("safe cell" for jitter/reprojection and sampling interpolation)

#if defined(OCCLUSION)
		BRANCH
		if (normalizedLocalPos.z > occlusionNormalizedDepth)
		{
			break; // if cell is not closer than scene anymore, the next ones won't be either
		}
#endif
	}

	maximumSliceAmountTexture[id.xy] = id.z;
}

#pragma kernel EvaluateDispatchSize

[numthreads(1, 1, 1)]
void EvaluateDispatchSize(uint3 dispatchThreadID : SV_DispatchThreadID, uint3 groupID : SV_GroupID, uint3 groupThreadID : SV_GroupThreadID)
{
	// Copying the count of the appended buffer doesn't work well as it results in a (VERY_LARGE_AMOUNT, 1, 1) DispatchIndirect.
	// The compute shader seem to work better when the threads are parted in maximized cuboid groups in a cuboid global dispatch.
	// TODO : Currently just make a cube with one safe dispatch in every dimension, this might be improved to stick better to the correct amount of dispatches while being more or less cuboid and being multiple of VISIBILITY_GROUPS_SIZE
	uint totalCellsAmount = visibleCellsAmountBuffer[0]; // the amount of visible cells to compute
	float cbrtAmount = pow((float)totalCellsAmount, 1.0f / 3.0f); // try to evaluate the sizes to fit in a cuboid
	float3 blocksAmount = float3(cbrtAmount, cbrtAmount, cbrtAmount) / (float3)VISIBILITY_GROUPS_SIZE; // groups of VISIBILITY_GROUPS_SIZE
	uint3 size = ceil(blocksAmount); // Make sure there is enough groups dispatched

	sizeBuffer[0] = size;
}
